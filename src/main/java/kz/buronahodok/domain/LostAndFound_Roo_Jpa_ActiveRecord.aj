// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package kz.buronahodok.domain;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import kz.buronahodok.domain.LostAndFound;
import org.springframework.transaction.annotation.Transactional;

privileged aspect LostAndFound_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager LostAndFound.entityManager;
    
    public static final List<String> LostAndFound.fieldNames4OrderClauseFilter = java.util.Arrays.asList("formId", "formType", "city", "lostCategory", "lostSubCategory", "name", "surname", "lostDate", "lostAddress", "description", "declarantName", "declarantPhone", "declarantEmail");
    
    public static final EntityManager LostAndFound.entityManager() {
        EntityManager em = new LostAndFound().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long LostAndFound.countLostAndFounds() {
        return entityManager().createQuery("SELECT COUNT(o) FROM LostAndFound o", Long.class).getSingleResult();
    }
    
    public static List<LostAndFound> LostAndFound.findAllLostAndFounds() {
        return entityManager().createQuery("SELECT o FROM LostAndFound o", LostAndFound.class).getResultList();
    }
    
    public static List<LostAndFound> LostAndFound.findAllLostAndFounds(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM LostAndFound o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, LostAndFound.class).getResultList();
    }
    
    public static LostAndFound LostAndFound.findLostAndFound(Long id) {
        if (id == null) return null;
        return entityManager().find(LostAndFound.class, id);
    }
    
    public static List<LostAndFound> LostAndFound.findLostAndFoundEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM LostAndFound o", LostAndFound.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<LostAndFound> LostAndFound.findLostAndFoundEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM LostAndFound o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, LostAndFound.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void LostAndFound.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void LostAndFound.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            LostAndFound attached = LostAndFound.findLostAndFound(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void LostAndFound.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void LostAndFound.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public LostAndFound LostAndFound.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        LostAndFound merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
