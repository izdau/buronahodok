// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package kz.buronahodok.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import kz.buronahodok.domain.LostAndFound;
import kz.buronahodok.domain.LostAndFoundDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect LostAndFoundDataOnDemand_Roo_DataOnDemand {
    
    declare @type: LostAndFoundDataOnDemand: @Component;
    
    private Random LostAndFoundDataOnDemand.rnd = new SecureRandom();
    
    private List<LostAndFound> LostAndFoundDataOnDemand.data;
    
    public LostAndFound LostAndFoundDataOnDemand.getNewTransientLostAndFound(int index) {
        LostAndFound obj = new LostAndFound();
        setCity(obj, index);
        setDeclarantEmail(obj, index);
        setDeclarantName(obj, index);
        setDeclarantPhone(obj, index);
        setDescription(obj, index);
        setLostAddress(obj, index);
        setLostCategory(obj, index);
        setLostDate(obj, index);
        setLostSubCategory(obj, index);
        setName(obj, index);
        setSurname(obj, index);
        return obj;
    }
    
    public void LostAndFoundDataOnDemand.setCity(LostAndFound obj, int index) {
        String city = "city_" + index;
        obj.setCity(city);
    }
    
    public void LostAndFoundDataOnDemand.setDeclarantEmail(LostAndFound obj, int index) {
        String declarantEmail = "foo" + index + "@bar.com";
        obj.setDeclarantEmail(declarantEmail);
    }
    
    public void LostAndFoundDataOnDemand.setDeclarantName(LostAndFound obj, int index) {
        String declarantName = "declarantName_" + index;
        obj.setDeclarantName(declarantName);
    }
    
    public void LostAndFoundDataOnDemand.setDeclarantPhone(LostAndFound obj, int index) {
        String declarantPhone = "declarantPhone_" + index;
        obj.setDeclarantPhone(declarantPhone);
    }
    
    public void LostAndFoundDataOnDemand.setDescription(LostAndFound obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void LostAndFoundDataOnDemand.setLostAddress(LostAndFound obj, int index) {
        String lostAddress = "lostAddress_" + index;
        obj.setLostAddress(lostAddress);
    }
    
    public void LostAndFoundDataOnDemand.setLostCategory(LostAndFound obj, int index) {
        String lostCategory = "lostCategory_" + index;
        obj.setLostCategory(lostCategory);
    }
    
    public void LostAndFoundDataOnDemand.setLostDate(LostAndFound obj, int index) {
        Date lostDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLostDate(lostDate);
    }
    
    public void LostAndFoundDataOnDemand.setLostSubCategory(LostAndFound obj, int index) {
        String lostSubCategory = "lostSubCategory_" + index;
        obj.setLostSubCategory(lostSubCategory);
    }
    
    public void LostAndFoundDataOnDemand.setName(LostAndFound obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void LostAndFoundDataOnDemand.setSurname(LostAndFound obj, int index) {
        String surname = "surname_" + index;
        obj.setSurname(surname);
    }
    
    public LostAndFound LostAndFoundDataOnDemand.getSpecificLostAndFound(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        LostAndFound obj = data.get(index);
        Long id = obj.getId();
        return LostAndFound.findLostAndFound(id);
    }
    
    public LostAndFound LostAndFoundDataOnDemand.getRandomLostAndFound() {
        init();
        LostAndFound obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return LostAndFound.findLostAndFound(id);
    }
    
    public boolean LostAndFoundDataOnDemand.modifyLostAndFound(LostAndFound obj) {
        return false;
    }
    
    public void LostAndFoundDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = LostAndFound.findLostAndFoundEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'LostAndFound' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<LostAndFound>();
        for (int i = 0; i < 10; i++) {
            LostAndFound obj = getNewTransientLostAndFound(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
